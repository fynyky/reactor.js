// Generated by CoffeeScript 1.6.1
(function() {
  var Observer, Signal, assert, _ref;

  assert = require('assert');

  _ref = require('./reactor'), Signal = _ref.Signal, Observer = _ref.Observer;

  describe('Signal', function() {
    it('Single static signal', function() {
      var a;
      a = Signal(1);
      assert.equal(a(), 1);
      assert.equal(a(2), 2);
      assert.equal(a(), 2);
      assert.equal(a(3), 3);
      return assert.equal(a(), 3);
    });
    it('Second static signal', function() {
      var a, b;
      a = Signal(1);
      b = Signal(2);
      assert.equal(a(), 1);
      assert.equal(b(), 2);
      assert.equal(a(), 1);
      assert.equal(b(3), 3);
      assert.equal(a(), 1);
      assert.equal(b(), 3);
      assert.equal(a(), 1);
      assert.equal(b(4), 4);
      assert.equal(a(), 1);
      return assert.equal(b(), 4);
    });
    it("Signal with simple single dependency", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(function() {
        return a();
      });
      assert.equal(a(), 1);
      assert.equal(b(), 1);
      a(2);
      assert.equal(a(), 2);
      assert.equal(b(), 2);
      c = Signal(3);
      assert.equal(a(), 2);
      return assert.equal(b(), 2);
    });
    it("multi dependents", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(function() {
        return a();
      });
      c = Signal(function() {
        return a() + 1;
      });
      assert.equal(a(), 1);
      assert.equal(b(), 1);
      assert.equal(c(), 2);
      a(2);
      assert.equal(a(), 2);
      assert.equal(b(), 2);
      return assert.equal(c(), 3);
    });
    it("Breaking dependency", function() {
      var a, b;
      a = Signal(1);
      b = Signal(function() {
        return a();
      });
      assert.equal(a(), 1);
      assert.equal(b(), 1);
      a(2);
      assert.equal(a(), 2);
      assert.equal(b(), 2);
      b(3);
      assert.equal(a(), 2);
      assert.equal(b(), 3);
      a(7);
      assert.equal(a(), 7);
      return assert.equal(b(), 3);
    });
    it("Signal with modified single dependency", function() {
      var a, b;
      a = Signal(1);
      b = Signal(function() {
        return a() + 10;
      });
      assert.equal(a(), 1);
      assert.equal(b(), 11);
      a(2);
      assert.equal(a(), 2);
      return assert.equal(b(), 12);
    });
    it("Signal with simple chain dependency", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(function() {
        return a();
      });
      c = Signal(function() {
        return b();
      });
      assert.equal(a(), 1);
      assert.equal(b(), 1);
      assert.equal(c(), 1);
      a(2);
      assert.equal(a(), 2);
      assert.equal(b(), 2);
      return assert.equal(c(), 2);
    });
    it("Signal with complex chain dependency", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(function() {
        return a() + 1;
      });
      c = Signal(function() {
        return b() + 1;
      });
      assert.equal(a(), 1);
      assert.equal(b(), 2);
      assert.equal(c(), 3);
      a(4);
      assert.equal(a(), 4);
      assert.equal(b(), 5);
      return assert.equal(c(), 6);
    });
    it("Signal with multiple dependency", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(2);
      c = Signal(function() {
        return a() + b();
      });
      assert.equal(a(), 1);
      assert.equal(b(), 2);
      assert.equal(c(), 3);
      a(3);
      assert.equal(a(), 3);
      assert.equal(b(), 2);
      assert.equal(c(), 5);
      b(4);
      assert.equal(a(), 3);
      assert.equal(b(), 4);
      return assert.equal(c(), 7);
    });
    return it("Multipath dependencies", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(function() {
        return a() + 1;
      });
      c = Signal(function() {
        return a() + b();
      });
      assert.equal(a(), 1);
      assert.equal(b(), 2);
      assert.equal(c(), 3);
      a(7);
      assert.equal(a(), 7);
      assert.equal(b(), 8);
      assert.equal(c(), 15);
      b(3);
      assert.equal(a(), 7);
      assert.equal(b(), 3);
      assert.equal(c(), 10);
      a(4);
      assert.equal(a(), 4);
      assert.equal(b(), 3);
      return assert.equal(c(), 7);
    });
  });

  describe("Observer", function() {
    it("basic observer", function() {
      var a, b, c;
      a = Signal(1);
      assert.equal(a(), 1);
      b = null;
      assert.equal(b, null);
      c = Observer(function() {
        return b = a();
      });
      assert.equal(b, 1);
      a(2);
      return assert.equal(b, 2);
    });
    it("multi observer", function() {
      var a, b, c, d, e, f;
      a = Signal(1);
      b = Signal(function() {
        return a();
      });
      c = Signal(function() {
        return a();
      });
      d = Signal(function() {
        return c();
      });
      e = 0;
      f = Observer(function() {
        return e += a() + b() + c() + d();
      });
      assert.equal(e, 4);
      a(2);
      return assert.equal(e, 12);
    });
    it("read write observer", function() {
      var a, b, c;
      a = Signal(1);
      b = Signal(2);
      assert.equal(a(), 1);
      assert.equal(b(), 2);
      c = Observer(function() {
        return b(a());
      });
      assert.equal(b(), 1);
      a(3);
      assert.equal(a(), 3);
      assert.equal(b(), 3);
      b(4);
      assert.equal(a(), 3);
      return assert.equal(b(), 4);
    });
    it("another read write observer", function() {
      var a, b, c, d;
      a = 0;
      b = Signal(1);
      c = Signal(2);
      assert.equal(a, 0);
      assert.equal(b(), 1);
      assert.equal(c(), 2);
      d = Observer(function() {
        a += 1;
        b();
        return c(3);
      });
      assert.equal(a, 1);
      assert.equal(b(), 1);
      assert.equal(c(), 3);
      a = 4;
      assert.equal(a, 4);
      assert.equal(b(), 1);
      assert.equal(c(), 3);
      b(6);
      assert.equal(a, 5);
      assert.equal(b(), 6);
      assert.equal(c(), 3);
      c(7);
      assert.equal(a, 5);
      assert.equal(b(), 6);
      return assert.equal(c(), 7);
    });
    it("object setter", function() {
      var a, b;
      a = Signal({});
      b = Signal(function() {
        return "Serialized: " + JSON.stringify(a());
      });
      assert.equal(b(), "Serialized: {}");
      a()["x"] = 1;
      assert.equal(JSON.stringify(a()), '{"x":1}');
      assert.equal(b(), "Serialized: {}");
      a(a());
      assert.equal(JSON.stringify(a()), '{"x":1}');
      assert.equal(b(), 'Serialized: {"x":1}');
      a.set("x", 2);
      assert.equal(JSON.stringify(a()), '{"x":2}');
      assert.equal(b(), 'Serialized: {"x":2}');
      a(3);
      assert.equal(a(), 3);
      assert.equal(b(), 'Serialized: 3');
      return assert.equal(a.set, void 0);
    });
    it("basic array push ", function() {
      var a;
      a = Signal([]);
      a.push("x");
      return assert.equal(JSON.stringify(a()), '["x"]');
    });
    it("array initialized properly", function() {
      var a;
      a = Signal([]);
      a.push("x");
      assert.equal(JSON.stringify(a()), '["x"]');
      a.push("y");
      assert.equal(JSON.stringify(a()), '["x","y"]');
      a.pop();
      assert.equal(JSON.stringify(a()), '["x"]');
      a.pop();
      assert.equal(JSON.stringify(a()), '[]');
      a.unshift("x");
      assert.equal(JSON.stringify(a()), '["x"]');
      a.unshift("y");
      assert.equal(JSON.stringify(a()), '["y","x"]');
      a.unshift("z");
      assert.equal(JSON.stringify(a()), '["z","y","x"]');
      a.sort();
      assert.equal(JSON.stringify(a()), '["x","y","z"]');
      a.reverse();
      assert.equal(JSON.stringify(a()), '["z","y","x"]');
      a.splice(1, 1, "w");
      assert.equal(JSON.stringify(a()), '["z","w","x"]');
      a.shift();
      return assert.equal(JSON.stringify(a()), '["w","x"]');
    });
    return it("array methods", function() {
      var a, b, c, d;
      a = Signal([]);
      b = Signal(function() {
        return "Serialized: " + JSON.stringify(a());
      });
      assert.equal(JSON.stringify(a()), '[]');
      assert.equal(b(), 'Serialized: []');
      a()[0] = "x";
      assert.equal(JSON.stringify(a()), '["x"]');
      assert.equal(b(), 'Serialized: []');
      a(a());
      assert.equal(JSON.stringify(a()), '["x"]');
      assert.equal(b(), 'Serialized: ["x"]');
      a.set(1, "y");
      assert.equal(JSON.stringify(a()), '["x","y"]');
      assert.equal(b(), 'Serialized: ["x","y"]');
      a.push("z");
      assert.equal(JSON.stringify(a()), '["x","y","z"]');
      assert.equal(b(), 'Serialized: ["x","y","z"]');
      a.unshift("w");
      assert.equal(JSON.stringify(a()), '["w","x","y","z"]');
      assert.equal(b(), 'Serialized: ["w","x","y","z"]');
      c = a.shift();
      assert.equal(JSON.stringify(a()), '["x","y","z"]');
      assert.equal(b(), 'Serialized: ["x","y","z"]');
      assert.equal(c, "w");
      a.reverse();
      assert.equal(JSON.stringify(a()), '["z","y","x"]');
      assert.equal(b(), 'Serialized: ["z","y","x"]');
      d = a.pop();
      assert.equal(JSON.stringify(a()), '["z","y"]');
      assert.equal(b(), 'Serialized: ["z","y"]');
      a.push("foo");
      a.push("bar");
      assert.equal(JSON.stringify(a()), '["z","y","foo","bar"]');
      assert.equal(b(), 'Serialized: ["z","y","foo","bar"]');
      d = a.splice(1, 2);
      assert.equal(JSON.stringify(d), '["y","foo"]');
      assert.equal(JSON.stringify(a()), '["z","bar"]');
      assert.equal(b(), 'Serialized: ["z","bar"]');
      a("pies");
      assert.equal(a(), "pies");
      assert.equal(b(), 'Serialized: "pies"');
      assert.equal(a.pop, void 0);
      assert.equal(a.push, void 0);
      assert.equal(a.shift, void 0);
      assert.equal(a.unshift, void 0);
      assert.equal(a.sort, void 0);
      assert.equal(a.reverse, void 0);
      return assert.equal(a.splice, void 0);
    });
  });

}).call(this);
